export declare type Vec2<T> = [T, T];
export declare type Vec3<T> = [T, T, T];
export declare type Vec4<T> = [T, T, T, T];
export declare type Range = Vec2<number>;
export declare type RGBColor = Vec3<number>;
export declare type RGBAColor = Vec4<number>;
export interface BaseNode {
    value: number;
}
export interface MapNode<T> extends BaseNode {
    mapped: T;
}
export interface ColorNode extends MapNode<RGBColor> {
}
export interface OpacityNode extends MapNode<number> {
}
export declare type Scale = (value: number) => number;
export declare type Mixer = (value: number, lowerNodeValue: number, upperNodeValue: number) => Vec2<number>;
export declare type LinearCombination<T> = (a: number, X: T, b: number, Y: T) => T;
export declare type MapFunction<T> = (value: number) => T;
export declare type ColorMap = MapFunction<RGBColor>;
export declare type OpacityMap = MapFunction<number>;
export declare type ColorOpacityMap = MapFunction<RGBAColor>;
